"use strict";(self.webpackChunktech_writer_docs_portfolio=self.webpackChunktech_writer_docs_portfolio||[]).push([[422],{3900:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"git/cli-basics","title":"Git CLI Basics","description":"A quick reference for commonly used Git commands to manage your repositories via the command line.","source":"@site/docs/git/cli-basics.md","sourceDirName":"git","slug":"/git/cli-basics","permalink":"/tech-writer-47-docs-as-code/docs/git/cli-basics","draft":false,"unlisted":false,"editUrl":"https://github.com/anandnr47/tech-writer-47-docs-as-code/edit/main/docs/git/cli-basics.md","tags":[],"version":"current","frontMatter":{"id":"cli-basics","title":"Git CLI Basics","sidebar_label":"Git Commands"},"sidebar":"tutorialSidebar","previous":{"title":"Install htop","permalink":"/tech-writer-47-docs-as-code/docs/tutorials/installing-htop"}}');var t=i(4848),a=i(8453);const r={id:"cli-basics",title:"Git CLI Basics",sidebar_label:"Git Commands"},c="Git CLI Basics",o={},l=[{value:"Initial Setup",id:"initial-setup",level:2},{value:"Create a New Repository",id:"create-a-new-repository",level:2},{value:"Clone an Existing Repository",id:"clone-an-existing-repository",level:2},{value:"Stage &amp; Commit Changes",id:"stage--commit-changes",level:2},{value:"View Status &amp; Logs",id:"view-status--logs",level:2},{value:"Push Changes to Remote",id:"push-changes-to-remote",level:2},{value:"Pull Changes from Remote",id:"pull-changes-from-remote",level:2},{value:"Branching",id:"branching",level:2},{value:"Undo Changes",id:"undo-changes",level:2},{value:"Sync Forked Repo with Original",id:"sync-forked-repo-with-original",level:2}];function h(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",p:"p",pre:"pre",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"git-cli-basics",children:"Git CLI Basics"})}),"\n",(0,t.jsx)(n.p,{children:"A quick reference for commonly used Git commands to manage your repositories via the command line."}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"initial-setup",children:"Initial Setup"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'git config --global user.name "Your Name"\r\ngit config --global user.email "your@email.com"\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"create-a-new-repository",children:"Create a New Repository"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"git init\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"clone-an-existing-repository",children:"Clone an Existing Repository"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"git clone https://github.com/user/repo.git\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"stage--commit-changes",children:"Stage & Commit Changes"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:'git add .        # Stage all files\r\ngit add <file>   # Stage specific file\r\ngit commit -m "Your commit message"\n'})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"view-status--logs",children:"View Status & Logs"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"git status\r\ngit log\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"push-changes-to-remote",children:"Push Changes to Remote"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"git push origin main\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"pull-changes-from-remote",children:"Pull Changes from Remote"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"git pull origin main\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"branching",children:"Branching"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"git branch new-feature      # Create a new branch\r\ngit checkout new-feature    # Switch to it\r\ngit checkout -b new-feature # Create + switch\r\ngit merge new-feature       # Merge into current branch\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"undo-changes",children:"Undo Changes"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"git restore <file>         # Discard local changes\r\ngit reset --hard HEAD      # Reset all changes\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.h2,{id:"sync-forked-repo-with-original",children:"Sync Forked Repo with Original"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-bash",children:"git remote add upstream https://github.com/original/repo.git\r\ngit fetch upstream\r\ngit merge upstream/main\n"})}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsx)(n.p,{children:"Use this as a starting point and expand with advanced workflows later!"})]})}function d(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>c});var s=i(6540);const t={},a=s.createContext(t);function r(e){const n=s.useContext(a);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);